/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JBedSideMonitorMainWindow.java
 *
 * Created on 11-jun-2011, 19:14:52
 */
package userInterface;

import algorithms.Algorithm;
import datasource.DataSource;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.javahispano.jsignalwb.jsignalmonitor.ChannelProperties;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitor;
import signals.JSignalAdapter;
import signals.SignalManager;

/**
 *
 * @author USUARIO
 */
public class JBedSideMonitorMainWindow extends javax.swing.JFrame {

    private JSignalAdapter jSignalAdapter;
    private JSignalMonitor jSignalMonitor;
    private Timer timer = null;

    /** Creates new form JBedSideMonitorMainWindow */
    public JBedSideMonitorMainWindow(JSignalAdapter jSignalAdapter) {
        initJBedSideMonitor(jSignalAdapter);
        //@pendiente creo que lookAndFeel no rula aqui
        lookAndFeel();
        initComponents();
        this.getContentPane().add(jSignalMonitor.getJSignalMonitorPanel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonRefresh = new javax.swing.JButton();
        jButtonFitRanges = new javax.swing.JButton();
        jButtonShowrXY = new javax.swing.JButton();
        jToggleButtonRealTime = new javax.swing.JToggleButton();
        jToggleButtonPlayPause = new javax.swing.JToggleButton();
        jButtonStart = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuTimeSeries = new javax.swing.JMenu();
        jMenuEventSeries = new javax.swing.JMenu();
        jMenuAlgorithm = new javax.swing.JMenu();
        jMenuDataSource = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JBedSideMonitor");
        setIconImage(new ImageIcon(getClass().getResource("/images/JBedSideMonitor.png")).getImage());
        setName("JBedSideMonitorMainWindow"); // NOI18N

        jToolBar1.setRollover(true);

        jButtonRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Refresh.png"))); // NOI18N
        jButtonRefresh.setText("Refresh");
        jButtonRefresh.setFocusable(false);
        jButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonRefresh);

        jButtonFitRanges.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FitRanges.png"))); // NOI18N
        jButtonFitRanges.setText("Fit Ranges");
        jButtonFitRanges.setFocusable(false);
        jButtonFitRanges.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFitRanges.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFitRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFitRangesActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFitRanges);

        jButtonShowrXY.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/XY.png"))); // NOI18N
        jButtonShowrXY.setText("ShowXY");
        jButtonShowrXY.setFocusable(false);
        jButtonShowrXY.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonShowrXY.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonShowrXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowrXYActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonShowrXY);

        jToggleButtonRealTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Time.png"))); // NOI18N
        jToggleButtonRealTime.setText("Real Time");
        jToggleButtonRealTime.setEnabled(false);
        jToggleButtonRealTime.setFocusable(false);
        jToggleButtonRealTime.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRealTime.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRealTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRealTimeActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRealTime);

        jToggleButtonPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PlayPause.png"))); // NOI18N
        jToggleButtonPlayPause.setText("PlayPause");
        jToggleButtonPlayPause.setEnabled(false);
        jToggleButtonPlayPause.setFocusable(false);
        jToggleButtonPlayPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPlayPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlayPauseActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonPlayPause);

        jButtonStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Play.png"))); // NOI18N
        jButtonStart.setText("START");
        jButtonStart.setFocusable(false);
        jButtonStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonStart);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setMinimumSize(new java.awt.Dimension(44, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("    JBedSideMonitor");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel1.setMinimumSize(new java.awt.Dimension(34, 18));
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 16));
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenuTimeSeries.setText("TimeSeries");
        this.jMenuTimeSeriesRefresh();
        jMenuBar1.add(jMenuTimeSeries);

        jMenuEventSeries.setText("EventSeries");
        this.jMenuEventSeriesRefresh();
        jMenuBar1.add(jMenuEventSeries);

        jMenuAlgorithm.setText("Algorithm");
        this.jMenuAlgorithmRefresh();
        jMenuBar1.add(jMenuAlgorithm);

        jMenuDataSource.setText("DataSource");
        this.jMenuDataSourcesRefresh();
        jMenuBar1.add(jMenuDataSource);

        jMenu4.setText("Settings");

        jMenuItem2.setText("Configurar Marcas Y Anotaciones");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("About");

        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 200 * jSignalMonitor.getFrecuency()) {
            jSignalMonitor.repaintAll();
            jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
        } else {
            jSignalMonitor.repaintAll();
        }
        this.refresh();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonFitRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFitRangesActionPerformed
        calculaMaxAndMinOfSignalsAndSetVisibleRange();
        this.refresh();
    }//GEN-LAST:event_jButtonFitRangesActionPerformed

    private void jButtonShowrXYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowrXYActionPerformed
        jSignalMonitor.setRepresentingXYValues(!jSignalMonitor.isRepresentingXYValues());
        this.refresh();
    }//GEN-LAST:event_jButtonShowrXYActionPerformed

    private void jToggleButtonRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRealTimeActionPerformed
        this.switchRealTime();
        this.refresh();
    }//GEN-LAST:event_jToggleButtonRealTimeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        jSignalAdapter.startSignalManager();
        jButtonStart.setVisible(false);
        jToggleButtonRealTime.setSelected(true);
        jToggleButtonRealTime.setEnabled(true);
                jToggleButtonPlayPause.setSelected(true);
        jToggleButtonPlayPause.setEnabled(true);
        this.switchRealTime();
        this.refresh();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jToggleButtonPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlayPauseActionPerformed
                jSignalAdapter.switchStateSignalManager();
                this.refresh();
    }//GEN-LAST:event_jToggleButtonPlayPauseActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
ConfigureAnnotationMark configureAnnotationMark=new ConfigureAnnotationMark(this, true, jSignalAdapter);
configureAnnotationMark.setLocationRelativeTo(this);
configureAnnotationMark.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        About aboutWindow=new About(this, true);
        aboutWindow.setLocationRelativeTo(this);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JBedSideMonitorMainWindow(SignalManager.getInstance().getJSignalAdapter()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFitRanges;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonShowrXY;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenuAlgorithm;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDataSource;
    private javax.swing.JMenu jMenuEventSeries;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenu jMenuTimeSeries;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jToggleButtonPlayPause;
    private javax.swing.JToggleButton jToggleButtonRealTime;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void lookAndFeel() {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                UIManager.installLookAndFeel("NimROD", "com.nilo.plaf.nimrod.NimRODLookAndFeel");
                try {
                    UIManager.setLookAndFeel("com.nilo.plaf.nimrod.NimRODLookAndFeel");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(JBedSideMonitorMainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(JBedSideMonitorMainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(JBedSideMonitorMainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(JBedSideMonitorMainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void initJBedSideMonitor(JSignalAdapter jSignalAdapter) {
        this.jSignalAdapter = jSignalAdapter;

        //@JSignalMonitor configuracion Inicial
        jSignalMonitor = new JSignalMonitor(jSignalAdapter);
        jSignalAdapter.setjSignalMonitor(jSignalMonitor);
        LinkedList<String> allTimeSeriesNames = jSignalAdapter.getAllTimeSeriesNames();
        for (String signalName : allTimeSeriesNames) {
            ChannelProperties properties = new ChannelProperties(signalName, 0, jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            System.out.println(signalName + " TamanoSignal:" + jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setHasEmphasis(false);
            //@pendiente tocar esto de nuevo y calcular el rango
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }

    private void calculaMaxAndMinOfSignalsAndSetVisibleRange() {
        //@JSignalMonitor establecer para cada senhal su maximo y minimo
        for (int i = 0; i < jSignalMonitor.channelsSize(); i++) {
            String signalName = jSignalMonitor.getChannelName(i);
            ChannelProperties channelProperties = jSignalMonitor.getChannelProperties(signalName);
            channelProperties.setVisibleRange(jSignalAdapter.getMinSignalTimeSeries(signalName),
                    jSignalAdapter.getMaxSignalTimeSeries(signalName));
        }
        jSignalMonitor.repaintAll();
    }

    private ArrayList<String> getSignalMarksForSignal(String signalName) {
        return jSignalAdapter.getSignalMarksForSignal(signalName);
    }

    private void jMenuItemActionShowSignal(java.awt.event.ActionEvent evt, String signalName) {
        if (jSignalMonitor.hasChannel(signalName)) {
            jSignalMonitor.removeChannel(signalName);
        } else {
            ChannelProperties properties = new ChannelProperties(signalName, 0,
                    jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }

    private void jMenuItemActionAnnotationShowSignal(java.awt.event.ActionEvent evt, String signalName) {
        jSignalAdapter.switchEventSeriesToAnnotations(signalName);
    }

    private void jMenuItemActionInfoSignal(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoTimeSeries showInfoSignal = new ShowInfoTimeSeries(this, true, jSignalAdapter.getTimeSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionInfoDataSource(java.awt.event.ActionEvent evt, String dataSourceName) {
        ShowInfoDataSource showInfoDataSource = new ShowInfoDataSource(this, true, jSignalAdapter.getDataSource(dataSourceName));
        showInfoDataSource.setLocationRelativeTo(this);
        showInfoDataSource.setVisible(true);
    }

    private void jMenuItemActionInfoEventSeries(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoEventSeries showInfoSignal = new ShowInfoEventSeries(this, true, jSignalAdapter.getEventSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionInfoAlgorithm(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoAlgorithm showInfoSignal = new ShowInfoAlgorithm(this, true, jSignalAdapter.getAlgorithm(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionExecutionInfoAlgorithm(java.awt.event.ActionEvent evt, String signalName) {
        ShowExecutionInfoAlgorithm showExecutionInfoSignal = new ShowExecutionInfoAlgorithm(this, true, jSignalAdapter.getAlgorithmExecutionInfo(signalName));
        showExecutionInfoSignal.setLocationRelativeTo(this);
        showExecutionInfoSignal.setVisible(true);
    }

    private void jMenuItemActionSwitchStateAlgorithm(java.awt.event.ActionEvent evt, String algorithmName) {
        jSignalAdapter.switchStateAlgorithm(algorithmName);
    }

    private void jMenuItemActionMarksShowSignal(java.awt.event.ActionEvent evt, String signalName, String markSignal) {
        jSignalAdapter.switchMarkSignalShow(signalName, markSignal);
    }

    private void jMenuItemActionConfigureDataSource(java.awt.event.ActionEvent evt, String dataSourceName) {
        DataSource dataSource = jSignalAdapter.getDataSource(dataSourceName);
        dataSource.showConfigurationGui(this);
    }

    private void jMenuItemActionConfigureAlgorithm(java.awt.event.ActionEvent evt, String algorithmName) {
        Algorithm algorithm = jSignalAdapter.getAlgorithm(algorithmName);
        algorithm.showConfigurationGui(this);
    }

    private void jMenuItemActionSetInvadeNearChannels(java.awt.event.ActionEvent evt, String signalName) {
        ChannelProperties channelProperties = jSignalMonitor.getChannelProperties(signalName);
        boolean option = channelProperties.isInvadeNearChannels();
        channelProperties.setInvadeNearChannels(!option);
    }

    private void jMenuItemActionSelectColor(java.awt.event.ActionEvent evt, String signalName) {
        JColorChooser jColorChooser = new JColorChooser();
        ChannelProperties channelProperties = jSignalMonitor.getChannelProperties(signalName);
        Color color = jColorChooser.showDialog(this, "Choose color for " + signalName,
                channelProperties.getDataColor());
        if (color != null) {
            channelProperties.setDataColor(color);
        }
    }

    private void jMenuTimeSeriesRefresh() {
        jMenuTimeSeries.setText("TimeSeries");
        jMenuTimeSeries.removeAll();
        {
            LinkedList<String> signals = this.jSignalAdapter.getAllTimeSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JRadioButtonMenuItem signalShow;
            javax.swing.JMenu signalsMarksMenu;
            javax.swing.JMenuItem signalInfo;
            javax.swing.JMenuItem signalColor;
            javax.swing.JRadioButtonMenuItem signalMark;
            javax.swing.JRadioButtonMenuItem invadeNearChannels;
            for (final String signal : signals) {
                signalMenu = new javax.swing.JMenu();
                signalMenu.setText(signal);
                signalShow = new javax.swing.JRadioButtonMenuItem();
                signalShow.setSelected(true);
                signalShow.setText("Mostrar/Ocultar");
                signalShow.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionShowSignal(evt, signal);
                    }
                });
                signalInfo = new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoSignal(evt, signal);
                    }
                });
                signalColor = new javax.swing.JMenuItem();
                signalColor.setText("Color");
                signalColor.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionSelectColor(evt, signal);
                    }
                });

                invadeNearChannels = new javax.swing.JRadioButtonMenuItem();
                invadeNearChannels.setText("InvadeNearChannels");
                invadeNearChannels.setSelected(true);
                invadeNearChannels.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionSetInvadeNearChannels(evt, signal);
                    }
                });
                signalMenu.add(invadeNearChannels);
                ArrayList<String> marksSignals = getSignalMarksForSignal(signal);

                if (!marksSignals.isEmpty()) {
                    signalsMarksMenu = new javax.swing.JMenu();
                    signalsMarksMenu.setText("Marks");
                    for (final String serieMark : marksSignals) {
                        signalMark = new javax.swing.JRadioButtonMenuItem();
                        signalMark.setSelected(true);
                        signalMark.setText(serieMark);
                        signalMark.addActionListener(new java.awt.event.ActionListener() {

                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemActionMarksShowSignal(evt, signal, serieMark);
                            }
                        });
                        signalsMarksMenu.add(signalMark);
                    }
                    signalMenu.add(signalsMarksMenu);
                }
                signalMenu.add(signalShow);
                signalMenu.add(signalInfo);
                signalMenu.add(signalColor);
                jMenuTimeSeries.add(signalMenu);
            }
        }
    }

    private void jMenuEventSeriesRefresh() {
        jMenuEventSeries.setText("EventSeries");
        jMenuEventSeries.removeAll();
        {
            LinkedList<String> signals = this.jSignalAdapter.getAllEventSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JRadioButtonMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            for (final String signal : signals) {
                signalMenu = new javax.swing.JMenu();
                if (jSignalAdapter.isEventSeriesLikeMarks(signal)) {
                    signalMenu.setText(signal + "(Mark)");
                } else {
                    signalMenu.setText(signal + "(Annotation)");
                    signalShow = new javax.swing.JRadioButtonMenuItem();
                    signalShow.setSelected(true);
                    signalShow.setText("Mostrar/Ocultar");
                    signalShow.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionAnnotationShowSignal(evt, signal);
                        }
                    });
                    signalMenu.add(signalShow);
                }
                signalInfo = new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoEventSeries(evt, signal);
                    }
                });
                signalMenu.add(signalInfo);
                jMenuEventSeries.add(signalMenu);
            }
        }
    }

    private void jMenuAlgorithmRefresh() {
        jMenuAlgorithm.setText("Algorithm");
        jMenuAlgorithm.removeAll();
        {
            LinkedList<String> algorithms = this.jSignalAdapter.getAllAlgorithmNames();
            javax.swing.JMenu algorithmMenu;
            javax.swing.JMenuItem algorithmInfo;
            javax.swing.JMenuItem algorithmExecutionInfo;
            javax.swing.JRadioButtonMenuItem algorithmState;
            javax.swing.JMenuItem algorithmConfigureGui;
            for (final String algorithm : algorithms) {
                algorithmMenu = new javax.swing.JMenu();
                algorithmMenu.setText(algorithm);

                algorithmInfo = new javax.swing.JMenuItem();
                algorithmInfo.setText("Info");
                algorithmInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoAlgorithm(evt, algorithm);
                    }
                });
                algorithmExecutionInfo = new javax.swing.JMenuItem();
                algorithmExecutionInfo.setText("ExecutionInfo");
                algorithmExecutionInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionExecutionInfoAlgorithm(evt, algorithm);
                    }
                });
                algorithmState = new javax.swing.JRadioButtonMenuItem();
                algorithmState.setSelected(true);
                algorithmState.setText("Active/Inactive");
                algorithmState.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionSwitchStateAlgorithm(evt, algorithm);
                    }
                });

                if (jSignalAdapter.getAlgorithm(algorithm).hasConfigurationGui()) {
                    algorithmConfigureGui = new javax.swing.JMenuItem();
                    algorithmConfigureGui.setText("Config GUI");
                    algorithmConfigureGui.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionConfigureAlgorithm(evt, algorithm);
                        }
                    });
                    algorithmMenu.add(algorithmConfigureGui);
                }


                algorithmMenu.add(algorithmInfo);
                algorithmMenu.add(algorithmExecutionInfo);
                algorithmMenu.add(algorithmState);
                jMenuAlgorithm.add(algorithmMenu);
            }
        }
    }

    private void jMenuDataSourcesRefresh() {
        jMenuDataSource.setText("DataSources");
        jMenuDataSource.removeAll();
        {
            LinkedList<String> dataSources = this.jSignalAdapter.getAllDataSourceNames();
            javax.swing.JMenu dataSourceMenu;
            javax.swing.JMenuItem dataSourceInfo;
            javax.swing.JMenuItem dataSourceConfigureGui;
            for (final String dataSource : dataSources) {
                dataSourceMenu = new javax.swing.JMenu();
                if (jSignalAdapter.getStateOfDataSource(dataSource)) {
                    dataSourceMenu.setText(dataSource + "(Active)");
                } else {
                    dataSourceMenu.setText(dataSource + "(Inactive)");
                }

                dataSourceInfo = new javax.swing.JMenuItem();
                dataSourceInfo.setText("Info");
                dataSourceInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoDataSource(evt, dataSource);
                    }
                });
                dataSourceMenu.add(dataSourceInfo);


                if (jSignalAdapter.getDataSource(dataSource).hasConfigurationGui()) {
                    dataSourceConfigureGui = new javax.swing.JMenuItem();
                    dataSourceConfigureGui.setText("Config GUI");
                    dataSourceConfigureGui.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionConfigureDataSource(evt, dataSource);
                        }
                    });
                    dataSourceMenu.add(dataSourceConfigureGui);
                }
                jMenuDataSource.add(dataSourceMenu);
            }
        }
    }

    private void jMenuRefresh() {
        this.jMenuEventSeriesRefresh();
        this.jMenuTimeSeriesRefresh();
        this.jMenuAlgorithmRefresh();
        this.jMenuDataSourcesRefresh();
    }

    private void refresh() {
        this.jMenuRefresh();
    }

    private void switchRealTime() {
        if (timer == null) {
            timer = new Timer(100, new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 10 * jSignalMonitor.getFrecuency()) {
                        jSignalMonitor.repaintAll();
                        jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
                    } else {
                        jSignalMonitor.repaintAll();
                    }
                }
            });
            timer.start();
        } else {
            if (timer.isRunning()) {
                timer.stop();
            } else {
                timer.start();
            }
        }
    }
}
