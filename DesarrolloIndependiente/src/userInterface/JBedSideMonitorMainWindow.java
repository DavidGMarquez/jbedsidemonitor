/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JBedSideMonitorMainWindow.java
 *
 * Created on 11-jun-2011, 19:14:52
 */
package userInterface;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.Timer;
import net.javahispano.jsignalwb.jsignalmonitor.ChannelProperties;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitor;
import signals.JSignalAdapter;
import signals.SignalManager;

/**
 *
 * @author USUARIO
 */
public class JBedSideMonitorMainWindow extends javax.swing.JFrame {

    private JSignalAdapter jSignalAdapter;
    private JSignalMonitor jSignalMonitor;
    private Timer timer = null;

    /** Creates new form JBedSideMonitorMainWindow */
    public JBedSideMonitorMainWindow(JSignalAdapter jSignalAdapter) {
        initJBedSideMonitor(jSignalAdapter);
        initComponents();
        this.getContentPane().add(jSignalMonitor.getJSignalMonitorPanel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JBedSideMonitor");

        jToolBar1.setRollover(true);

        jButton1.setText("Actualizar");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("Ajustar Rango");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("MostrarXY");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jToggleButton1.setText("Tiempo Real");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setMinimumSize(new java.awt.Dimension(44, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("JBedSideMonitor");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel1.setMinimumSize(new java.awt.Dimension(34, 18));
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 16));
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("TimeSeries");
        {
            LinkedList<String> signals=this.jSignalAdapter.getAllTimeSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JMenu signalsMarksMenu;
            javax.swing.JMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            javax.swing.JMenuItem signalMark;
            for(final String signal:signals)
            {
                signalMenu=new javax.swing.JMenu();
                signalMenu.setText(signal);
                signalShow=new javax.swing.JMenuItem();
                signalShow.setText("Mostrar/Ocultar");
                signalShow.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionShowSignal(evt,signal);
                    }
                });
                signalInfo=new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoSignal(evt,signal);
                    }
                });

                ArrayList<String> marksSignals=getSignalMarksForSignal(signal);

                if(!marksSignals.isEmpty()){
                    signalsMarksMenu=new javax.swing.JMenu();
                    signalsMarksMenu.setText("Marks");
                    for(final String serieMark:marksSignals){
                        signalMark=new javax.swing.JMenuItem();
                        signalMark.setText(serieMark);
                        signalMark.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemActionMarksShowSignal(evt,signal,serieMark);
                            }
                        });
                        signalsMarksMenu.add(signalMark);
                    }
                    signalMenu.add(signalsMarksMenu);
                }
                signalMenu.add(signalShow);
                signalMenu.add(signalInfo);
                jMenu2.add(signalMenu);
            }
        }
        jMenuBar1.add(jMenu2);

        jMenu3.setText("EventSeries");
        {
            LinkedList<String> signals=this.jSignalAdapter.getAllEventSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            for(final String signal:signals)
            {
                signalMenu=new javax.swing.JMenu();
                signalMenu.setText(signal);
                if(jSignalAdapter.isEventSeriesLikeMarks(signal)){
                }
                else{
                    signalShow=new javax.swing.JMenuItem();
                    signalShow.setText("Mostrar/Ocultar");
                    signalShow.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionAnnotationShowSignal(evt,signal);
                        }
                    });
                    signalMenu.add(signalShow);
                }
                signalInfo=new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoEventSeries(evt,signal);
                    }
                });
                signalMenu.add(signalInfo);
                jMenu3.add(signalMenu);
            }
        }
        jMenuBar1.add(jMenu3);

        jMenu5.setText("Algorithm");
        {
            LinkedList<String> algorithms=this.jSignalAdapter.getAllAlgorithmNames();
            javax.swing.JMenu algorithmMenu;
            javax.swing.JMenuItem algorithmInfo;
            for(final String algorithm:algorithms)
            {
                algorithmMenu=new javax.swing.JMenu();
                algorithmMenu.setText(algorithm);

                algorithmInfo=new javax.swing.JMenuItem();
                algorithmInfo.setText("Info");
                algorithmInfo.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoAlgorithm(evt,algorithm);
                    }
                });
                algorithmMenu.add(algorithmInfo);
                jMenu5.add(algorithmMenu);
            }
        }
        jMenuBar1.add(jMenu5);

        jMenu4.setText("System");

        jMenuItem2.setText("Play/Pause");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 200 * jSignalMonitor.getFrecuency()) {
            jSignalMonitor.repaintAll();
            jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
        } else {
            jSignalMonitor.repaintAll();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        calculaMaxAndMinOfSignalsAndSetVisibleRange();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jSignalMonitor.setRepresentingXYValues(!jSignalMonitor.isRepresentingXYValues());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (timer == null) {
            timer = new Timer(100, new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 200 * jSignalMonitor.getFrecuency()) {
                        jSignalMonitor.repaintAll();
                        jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
                    } else {
                        jSignalMonitor.repaintAll();

                    }
                }
            });
            timer.start();
        } else {
            if (timer.isRunning()) {
                timer.stop();

            } else {
                timer.start();
            }
        }

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jSignalAdapter.switchStateSignalManager();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JBedSideMonitorMainWindow(SignalManager.getInstance().getJSignalAdapter()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void initJBedSideMonitor(JSignalAdapter jSignalAdapter) {
        this.jSignalAdapter = jSignalAdapter;

        //@JSignalMonitor configuracion Inicial
        jSignalMonitor = new JSignalMonitor(jSignalAdapter);
        jSignalAdapter.setjSignalMonitor(jSignalMonitor);
        LinkedList<String> allTimeSeriesNames = jSignalAdapter.getAllTimeSeriesNames();
        for (String signalName : allTimeSeriesNames) {
            ChannelProperties properties = new ChannelProperties(signalName, 0, jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            System.out.println(signalName + " TamanoSignal:" + jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setHasEmphasis(false);
            //@pendiente tocar esto de nuevo y calcular el rango
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }

    private void calculaMaxAndMinOfSignalsAndSetVisibleRange() {
        //@JSignalMonitor establecer para cada senhal su maximo y minimo
        for (int i = 0; i < jSignalMonitor.channelsSize(); i++) {
            String signalName = jSignalMonitor.getChannelName(i);
            ChannelProperties channelProperties = jSignalMonitor.getChannelProperties(signalName);
            channelProperties.setVisibleRange(jSignalAdapter.getMinSignalTimeSeries(signalName),
                    jSignalAdapter.getMaxSignalTimeSeries(signalName));
        }
        jSignalMonitor.repaintAll();
    }

    private ArrayList<String> getSignalMarksForSignal(String signalName) {
        return jSignalAdapter.getSignalMarksForSignal(signalName);
    }

    private void jMenuItemActionShowSignal(java.awt.event.ActionEvent evt, String signalName) {
        if (jSignalMonitor.hasChannel(signalName)) {
            jSignalMonitor.removeChannel(signalName);
        } else {
            ChannelProperties properties = new ChannelProperties(signalName, 0,
                    jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }
        private void jMenuItemActionAnnotationShowSignal(java.awt.event.ActionEvent evt, String signalName) {
            jSignalAdapter.switchEventSeriesToAnnotations(signalName);
    }

    private void jMenuItemActionInfoSignal(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoTimeSeries showInfoSignal = new ShowInfoTimeSeries(this, true, jSignalAdapter.getTimeSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);

    }

    private void jMenuItemActionInfoEventSeries(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoEventSeries showInfoSignal = new ShowInfoEventSeries(this, true, jSignalAdapter.getEventSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }
        private void jMenuItemActionInfoAlgorithm(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoAlgorithm showInfoSignal = new ShowInfoAlgorithm(this, true, jSignalAdapter.getAlgorithm(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionMarksShowSignal(java.awt.event.ActionEvent evt, String signalName, String markSignal) {
        jSignalAdapter.switchMarkSignalShow(signalName, markSignal);
    }

}
