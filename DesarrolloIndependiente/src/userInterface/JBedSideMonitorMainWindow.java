/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JBedSideMonitorMainWindow.java
 *
 * Created on 11-jun-2011, 19:14:52
 */
package userInterface;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.Timer;
import net.javahispano.jsignalwb.jsignalmonitor.ChannelProperties;
import net.javahispano.jsignalwb.jsignalmonitor.JSignalMonitor;
import signals.JSignalAdapter;
import signals.SignalManager;

/**
 *
 * @author USUARIO
 */
public class JBedSideMonitorMainWindow extends javax.swing.JFrame {

    private JSignalAdapter jSignalAdapter;
    private JSignalMonitor jSignalMonitor;
    private Timer timer = null;

    /** Creates new form JBedSideMonitorMainWindow */
    public JBedSideMonitorMainWindow(JSignalAdapter jSignalAdapter) {
        initJBedSideMonitor(jSignalAdapter);
        initComponents();
        this.getContentPane().add(jSignalMonitor.getJSignalMonitorPanel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonRefresh = new javax.swing.JButton();
        jButtonFitRanges = new javax.swing.JButton();
        jButtonShowrXY = new javax.swing.JButton();
        jToggleButtonRealTime = new javax.swing.JToggleButton();
        jButtonStart = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuTimeSeries = new javax.swing.JMenu();
        jMenuEventSeries = new javax.swing.JMenu();
        jMenuAlgorithm = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JBedSideMonitor");

        jToolBar1.setRollover(true);

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.setFocusable(false);
        jButtonRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonRefresh);

        jButtonFitRanges.setText("Fit Ranges");
        jButtonFitRanges.setFocusable(false);
        jButtonFitRanges.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFitRanges.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFitRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFitRangesActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFitRanges);

        jButtonShowrXY.setText("ShowXY");
        jButtonShowrXY.setFocusable(false);
        jButtonShowrXY.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonShowrXY.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonShowrXY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowrXYActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonShowrXY);

        jToggleButtonRealTime.setText("Real Time");
        jToggleButtonRealTime.setFocusable(false);
        jToggleButtonRealTime.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRealTime.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRealTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRealTimeActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRealTime);

        jButtonStart.setText("START");
        jButtonStart.setFocusable(false);
        jButtonStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonStart);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setMinimumSize(new java.awt.Dimension(44, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("JBedSideMonitor");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel1.setMinimumSize(new java.awt.Dimension(34, 18));
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 16));
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenuTimeSeries.setText("TimeSeries");
        this.jMenuTimeSeriesRefresh();
        jMenuBar1.add(jMenuTimeSeries);

        jMenuEventSeries.setText("EventSeries");
        {
            LinkedList<String> signals=this.jSignalAdapter.getAllEventSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            for(final String signal:signals)
            {
                signalMenu=new javax.swing.JMenu();
                signalMenu.setText(signal);
                if(jSignalAdapter.isEventSeriesLikeMarks(signal)){
                }
                else{
                    signalShow=new javax.swing.JMenuItem();
                    signalShow.setText("Mostrar/Ocultar");
                    signalShow.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionAnnotationShowSignal(evt,signal);
                        }
                    });
                    signalMenu.add(signalShow);
                }
                signalInfo=new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoEventSeries(evt,signal);
                    }
                });
                signalMenu.add(signalInfo);
                jMenuEventSeries.add(signalMenu);
            }
        }
        jMenuBar1.add(jMenuEventSeries);

        jMenuAlgorithm.setText("Algorithm");
        {
            LinkedList<String> algorithms=this.jSignalAdapter.getAllAlgorithmNames();
            javax.swing.JMenu algorithmMenu;
            javax.swing.JMenuItem algorithmInfo;
            for(final String algorithm:algorithms)
            {
                algorithmMenu=new javax.swing.JMenu();
                algorithmMenu.setText(algorithm);

                algorithmInfo=new javax.swing.JMenuItem();
                algorithmInfo.setText("Info");
                algorithmInfo.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoAlgorithm(evt,algorithm);
                    }
                });
                algorithmMenu.add(algorithmInfo);
                jMenuAlgorithm.add(algorithmMenu);
            }
            System.out.println("Ejecutando");
        }
        jMenuBar1.add(jMenuAlgorithm);

        jMenu4.setText("Status");

        jMenuItem2.setText("Play/Pause");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 200 * jSignalMonitor.getFrecuency()) {
            jSignalMonitor.repaintAll();
            jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
        } else {
            jSignalMonitor.repaintAll();
        }
        this.jMenuRefresh();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonFitRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFitRangesActionPerformed
        calculaMaxAndMinOfSignalsAndSetVisibleRange();
    }//GEN-LAST:event_jButtonFitRangesActionPerformed

    private void jButtonShowrXYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowrXYActionPerformed
        jSignalMonitor.setRepresentingXYValues(!jSignalMonitor.isRepresentingXYValues());
    }//GEN-LAST:event_jButtonShowrXYActionPerformed

    private void jToggleButtonRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRealTimeActionPerformed
        if (timer == null) {
            timer = new Timer(100, new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (Math.abs(jSignalMonitor.getScrollValue() + jSignalMonitor.getVisibleTime() - jSignalMonitor.getEndTime()) < 200 * jSignalMonitor.getFrecuency()) {
                        jSignalMonitor.repaintAll();
                        jSignalMonitor.setScrollValue(jSignalMonitor.getEndTime());
                    } else {
                        jSignalMonitor.repaintAll();

                    }
                }
            });
            timer.start();
        } else {
            if (timer.isRunning()) {
                timer.stop();

            } else {
                timer.start();
            }
        }

    }//GEN-LAST:event_jToggleButtonRealTimeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jSignalAdapter.switchStateSignalManager();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        jSignalAdapter.startSignalManager();
        jButtonStart.setVisible(false);
    }//GEN-LAST:event_jButtonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JBedSideMonitorMainWindow(SignalManager.getInstance().getJSignalAdapter()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFitRanges;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonShowrXY;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenuAlgorithm;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEventSeries;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu jMenuTimeSeries;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jToggleButtonRealTime;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private void initJBedSideMonitor(JSignalAdapter jSignalAdapter) {
        this.jSignalAdapter = jSignalAdapter;

        //@JSignalMonitor configuracion Inicial
        jSignalMonitor = new JSignalMonitor(jSignalAdapter);
        jSignalAdapter.setjSignalMonitor(jSignalMonitor);
        LinkedList<String> allTimeSeriesNames = jSignalAdapter.getAllTimeSeriesNames();
        for (String signalName : allTimeSeriesNames) {
            ChannelProperties properties = new ChannelProperties(signalName, 0, jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            System.out.println(signalName + " TamanoSignal:" + jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setHasEmphasis(false);
            //@pendiente tocar esto de nuevo y calcular el rango
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }

    private void calculaMaxAndMinOfSignalsAndSetVisibleRange() {
        //@JSignalMonitor establecer para cada senhal su maximo y minimo
        for (int i = 0; i < jSignalMonitor.channelsSize(); i++) {
            String signalName = jSignalMonitor.getChannelName(i);
            ChannelProperties channelProperties = jSignalMonitor.getChannelProperties(signalName);
            channelProperties.setVisibleRange(jSignalAdapter.getMinSignalTimeSeries(signalName),
                    jSignalAdapter.getMaxSignalTimeSeries(signalName));
        }
        jSignalMonitor.repaintAll();
    }

    private ArrayList<String> getSignalMarksForSignal(String signalName) {
        return jSignalAdapter.getSignalMarksForSignal(signalName);
    }

    private void jMenuItemActionShowSignal(java.awt.event.ActionEvent evt, String signalName) {
        if (jSignalMonitor.hasChannel(signalName)) {
            jSignalMonitor.removeChannel(signalName);
        } else {
            ChannelProperties properties = new ChannelProperties(signalName, 0,
                    jSignalAdapter.getFrecuencySignalTimeSeries(signalName), jSignalAdapter.getDataSizeTimeSeries(signalName));
            properties.setVisibleRange(-1, 1);
            properties.setHasEmphasis(false);
            jSignalMonitor.addChannel(signalName, properties);
        }
    }

    private void jMenuItemActionAnnotationShowSignal(java.awt.event.ActionEvent evt, String signalName) {
        jSignalAdapter.switchEventSeriesToAnnotations(signalName);
    }

    private void jMenuItemActionInfoSignal(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoTimeSeries showInfoSignal = new ShowInfoTimeSeries(this, true, jSignalAdapter.getTimeSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);

    }

    private void jMenuItemActionInfoEventSeries(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoEventSeries showInfoSignal = new ShowInfoEventSeries(this, true, jSignalAdapter.getEventSeries(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionInfoAlgorithm(java.awt.event.ActionEvent evt, String signalName) {
        ShowInfoAlgorithm showInfoSignal = new ShowInfoAlgorithm(this, true, jSignalAdapter.getAlgorithm(signalName));
        showInfoSignal.setLocationRelativeTo(this);
        showInfoSignal.setVisible(true);
    }

    private void jMenuItemActionMarksShowSignal(java.awt.event.ActionEvent evt, String signalName, String markSignal) {
        jSignalAdapter.switchMarkSignalShow(signalName, markSignal);
    }

    private void jMenuTimeSeriesRefresh() {
        jMenuTimeSeries.setText("TimeSeries");
        jMenuTimeSeries.removeAll();
        {
            LinkedList<String> signals = this.jSignalAdapter.getAllTimeSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JMenu signalsMarksMenu;
            javax.swing.JMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            javax.swing.JMenuItem signalMark;
            for (final String signal : signals) {
                signalMenu = new javax.swing.JMenu();
                signalMenu.setText(signal);
                signalShow = new javax.swing.JMenuItem();
                signalShow.setText("Mostrar/Ocultar");
                signalShow.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionShowSignal(evt, signal);
                    }
                });
                signalInfo = new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoSignal(evt, signal);
                    }
                });

                ArrayList<String> marksSignals = getSignalMarksForSignal(signal);

                if (!marksSignals.isEmpty()) {
                    signalsMarksMenu = new javax.swing.JMenu();
                    signalsMarksMenu.setText("Marks");
                    for (final String serieMark : marksSignals) {
                        signalMark = new javax.swing.JMenuItem();
                        signalMark.setText(serieMark);
                        signalMark.addActionListener(new java.awt.event.ActionListener() {

                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemActionMarksShowSignal(evt, signal, serieMark);
                            }
                        });
                        signalsMarksMenu.add(signalMark);
                    }
                    signalMenu.add(signalsMarksMenu);
                }
                signalMenu.add(signalShow);
                signalMenu.add(signalInfo);
                jMenuTimeSeries.add(signalMenu);
            }
        }
    }

    private void jMenuEventSeriesRefresh() {
        jMenuEventSeries.setText("EventSeries");
        jMenuEventSeries.removeAll();
        {
            LinkedList<String> signals = this.jSignalAdapter.getAllEventSeriesNames();
            javax.swing.JMenu signalMenu;
            javax.swing.JMenuItem signalShow;
            javax.swing.JMenuItem signalInfo;
            for (final String signal : signals) {
                signalMenu = new javax.swing.JMenu();
                signalMenu.setText(signal);
                if (jSignalAdapter.isEventSeriesLikeMarks(signal)) {
                } else {
                    signalShow = new javax.swing.JMenuItem();
                    signalShow.setText("Mostrar/Ocultar");
                    signalShow.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItemActionAnnotationShowSignal(evt, signal);
                        }
                    });
                    signalMenu.add(signalShow);
                }
                signalInfo = new javax.swing.JMenuItem();
                signalInfo.setText("Info");
                signalInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoEventSeries(evt, signal);
                    }
                });
                signalMenu.add(signalInfo);
                jMenuEventSeries.add(signalMenu);
            }
        }
    }

    private void jMenuAlgorithmRefresh() {
        jMenuAlgorithm.setText("Algorithm");
        jMenuAlgorithm.removeAll();
        {
            LinkedList<String> algorithms = this.jSignalAdapter.getAllAlgorithmNames();
            javax.swing.JMenu algorithmMenu;
            javax.swing.JMenuItem algorithmInfo;
            for (final String algorithm : algorithms) {
                algorithmMenu = new javax.swing.JMenu();
                algorithmMenu.setText(algorithm);

                algorithmInfo = new javax.swing.JMenuItem();
                algorithmInfo.setText("Info");
                algorithmInfo.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemActionInfoAlgorithm(evt, algorithm);
                    }
                });
                algorithmMenu.add(algorithmInfo);
                jMenuAlgorithm.add(algorithmMenu);
            }
        }
    }

    private void jMenuRefresh() {
        System.out.println("Refrescando menus");
        this.jMenuEventSeriesRefresh();
        this.jMenuTimeSeriesRefresh();
        this.jMenuAlgorithmRefresh();
    }
}
